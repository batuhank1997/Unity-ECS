//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity rotatePlayerSystemEntity { get { return GetGroup(GameMatcher.RotatePlayerSystem).GetSingleEntity(); } }
    public RotatePlayerSystemComponent rotatePlayerSystem { get { return rotatePlayerSystemEntity.rotatePlayerSystem; } }
    public bool hasRotatePlayerSystem { get { return rotatePlayerSystemEntity != null; } }

    public GameEntity SetRotatePlayerSystem(RotatePlayerSystem newValue) {
        if (hasRotatePlayerSystem) {
            throw new Entitas.EntitasException("Could not set RotatePlayerSystem!\n" + this + " already has an entity with RotatePlayerSystemComponent!",
                "You should check if the context already has a rotatePlayerSystemEntity before setting it or use context.ReplaceRotatePlayerSystem().");
        }
        var entity = CreateEntity();
        entity.AddRotatePlayerSystem(newValue);
        return entity;
    }

    public void ReplaceRotatePlayerSystem(RotatePlayerSystem newValue) {
        var entity = rotatePlayerSystemEntity;
        if (entity == null) {
            entity = SetRotatePlayerSystem(newValue);
        } else {
            entity.ReplaceRotatePlayerSystem(newValue);
        }
    }

    public void RemoveRotatePlayerSystem() {
        rotatePlayerSystemEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public RotatePlayerSystemComponent rotatePlayerSystem { get { return (RotatePlayerSystemComponent)GetComponent(GameComponentsLookup.RotatePlayerSystem); } }
    public bool hasRotatePlayerSystem { get { return HasComponent(GameComponentsLookup.RotatePlayerSystem); } }

    public void AddRotatePlayerSystem(RotatePlayerSystem newValue) {
        var index = GameComponentsLookup.RotatePlayerSystem;
        var component = (RotatePlayerSystemComponent)CreateComponent(index, typeof(RotatePlayerSystemComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceRotatePlayerSystem(RotatePlayerSystem newValue) {
        var index = GameComponentsLookup.RotatePlayerSystem;
        var component = (RotatePlayerSystemComponent)CreateComponent(index, typeof(RotatePlayerSystemComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveRotatePlayerSystem() {
        RemoveComponent(GameComponentsLookup.RotatePlayerSystem);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherRotatePlayerSystem;

    public static Entitas.IMatcher<GameEntity> RotatePlayerSystem {
        get {
            if (_matcherRotatePlayerSystem == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.RotatePlayerSystem);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherRotatePlayerSystem = matcher;
            }

            return _matcherRotatePlayerSystem;
        }
    }
}
